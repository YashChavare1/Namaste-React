Q1. What is Emmet?
Emmet is a web development tool that helps to increase HTML and CSS workflow efficiency. It allows developers to write HTML and CSS code using abbreviations and then expand them into complete code snippets. For example, typing ul>li*3 and then triggering the expansion command would generate:

<ul>
    <li></li>
    <li></li>
    <li></li>
</ul>


Q2. What is library and Framework
- Framework: A framework is a comprehensive structure that provides guidelines, rules, and conventions for building applications. It often dictates the flow of control and provides a skeleton for your application, with you filling in the details.

- Library: A library is a collection of reusable code that provides specific functionality, which developers can use in their projects. Unlike frameworks, libraries do not dictate the overall structure or flow of the application; instead, developers control how and when to use the library's functions.

Q3. What is CDN?
- CDN stands for content delivery network. It is a network of  geographically distributed servers that work together to deliver internet content, such as web pages, videos, images, and other resources, to users based on their geographic location. 
- The purpose of a CDN is to improve the performance, reliability, and scalability of delivering content over the internet.
- React Library is hosted on CDN.


Q4. How a CDN typically works:
1. Content is replicated and cached on servers distributed across various locations called Points of Presence (PoPs).
2. When a user requests content, the CDN automatically routes the request to the nearest server (PoP) that has a copy of the content.
3. This reduces the physical distance between the user and the server, resulting in faster content delivery and reduced latency.
4. Additionally, CDNs can help mitigate traffic spikes, distribute bandwidth usage, and provide protection against certain types of cyber attacks, such as Distributed Denial of Service (DDoS) attacks.


Q5. Why do we use CDN
1. Faster Page Load Times: CDNs cache website content closer to users, reducing the distance data needs to travel, hence speeding up page loading.
2. Global Reach: With servers worldwide, CDNs ensure fast content delivery to users regardless of their location.
3. Scalability: CDNs distribute traffic across multiple servers, preventing overload during traffic spikes and maintaining site performance.
4. Load Balancing: CDNs evenly distribute requests across servers, optimizing resource usage and ensuring consistent performance.
5. Improved Reliability: CDNs offer redundancy and failover mechanisms, ensuring content availability even if one server fails.
6. Security: CDNs provide features like DDoS protection and SSL encryption, safeguarding websites against cyber threats.
7. Bandwidth Savings: By caching content, CDNs reduce the load on origin servers, leading to cost savings on bandwidth usage

Q6. Why React is known as React?
- React gets its name from its core concept of reactive programming. 
- It efficiently updates the user interface by re-rendering components in response to changes in data or state. 
- This reactive behavior is achieved through the use of a virtual DOM (Document Object Model) and a reconciliation algorithm, which efficiently determines the minimal set of changes needed to update the actual DOM. 
- As a result, React provides a highly performant and declarative way of building user interfaces that react to changes in application state.

Q7. What is crossorigin in script tag?
- The `crossorigin` attribute in a `<script>` tag is used to specify how the browser should handle requests for cross-origin scripts. Cross-origin requests occur when a script on one domain attempts to fetch resources from another domain.
- When you include a `<script>` tag in your HTML to load a script from a different origin (i.e., a different domain, protocol, or port), the browser typically imposes security restrictions to prevent certain types of attacks, such as cross-site scripting (XSS).
- The `crossorigin` attribute allows you to specify how the browser should handle the loading and execution of such scripts. It accepts two main values:
    1. **anonymous**: This is the default value if the attribute is present but has no value specified. With `crossorigin="anonymous"`, the browser loads the script without sending any credentials (like cookies or HTTP authentication) along with the request. This is suitable for scripts that don't require access to sensitive data on the server.
    2. **use-credentials**: If you set `crossorigin="use-credentials"`, the browser will include any credentials associated with the current page (such as cookies or HTTP authentication headers) when making the request for the script. This can be useful when the script needs access to restricted resources on the server, but it requires the server to allow such requests from the origin of the requesting page.
-Here's an example of how you might use the `crossorigin` attribute in a `<script>` tag:

<script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script> 

In this example, the script located at `https://unpkg.com/react@18/umd/react.development.js` will be loaded without sending any credentials along with the request, providing an additional layer of security.

Q8. What is difference between React and ReactDOM
- React: React is a JavaScript library for building user interfaces. It provides the core functionality for defining and rendering UI components, managing component state, handling events, and more. React is platform-agnostic, meaning it can be used to build UIs for web applications, mobile apps (with React Native), and other platforms.

- ReactDOM: ReactDOM is a package specifically designed for rendering React components in the DOM (Document Object Model). It provides methods for mounting React components into the DOM, updating them in response to changes, and unmounting them when they are no longer needed. ReactDOM is primarily used in web development to integrate React components into HTML documents.

In summary:
- React is the core library for building user interfaces with React.
- ReactDOM is a package for rendering React components in the DOM, specifically for web development.

Q9. What is difference between react.development.js and react.production.js files via CDN?
- react.development.js:
    1. This file contains the development version of React.
    2. It includes additional debugging information and error messages to aid developers during development and debugging processes.
    3. It is larger in size compared to the production version because of the included debugging code.
    4. It is not optimized for performance but provides better visibility into React's internals and helps developers diagnose issues more easily.

- react.production.js:
    1. This file contains the production version of React.
    2. It is optimized for performance and stripped of any development-specific debugging code or messages.
    3. It is smaller in size compared to the development version, reducing load times for end-users.
    4. It is intended for use in production environments where performance and file size are critical considerations.
    5. It does not provide as much visibility into React's internals or error messages as the development version.

Q10. Why there is need of react
- Component Based Architecture
- Virtual DOM
- JSX: React uses JSX, a syntax extension that allows developers to write HTML-like code directly within JavaScript. JSX makes it easier to write and understand the structure of UI components, as it closely resembles the final output.
- Declarative Syntax: React uses a declarative syntax, which means developers describe what they want the UI to look like, and React takes care of updating the DOM to match that description. This makes the code more predictable, easier to understand, and less error-prone compared to imperative approaches.

Q11. Q. What is Virtual DOM?
- The Virtual DOM is a concept used by React to improve performance when updating the UI. Here's how it works and why it's advantageous:
    1. Efficient Updates: When a change is made to the UI in React, instead of directly updating the real DOM, React first updates a virtual representation of the DOM in memory. This virtual DOM is a lightweight copy of the real DOM.
    2. Diffing Algorithm: After the virtual DOM is updated, React performs a process called "reconciliation" or "diffing" where it compares the updated virtual DOM with the previous version. By analyzing the differences between the two virtual DOM representations, React determines the most efficient way to update the real DOM.
    3. Batching Updates: React batches multiple updates to the virtual DOM and then applies them in a single pass to the real DOM. This reduces the number of DOM manipulations, which can be costly in terms of performance.
    4. Minimized DOM Operations: React updates only the parts of the real DOM that have actually changed, rather than re-rendering the entire UI. This minimizes the number of DOM operations, resulting in better performance, especially for complex UIs with frequent updates.

- The mostly costly operation in webpage is modification of the dom tree. putting some nodes and removing nodes from dom is most costly operation for a webpage
- React Comes with a philosophy to manipulate dom using js 
- "react.development.js" is the core file of the react
- "react-dom.development.js" this the react libray which is used for dom operation and it is required to modify the dom. It is also a bridge between core react and browser
- write react or reactDOM in console to view their feature
 
Q12. What is async and defer?
Certainly!

Your descriptions are mostly correct, but I'd like to provide a minor clarification:

1. Normal Script Loadin*:
   - The script blocks HTML parsing until it is downloaded and executed. Once executed, HTML parsing continues.
   - Example: `<script src="script.js"></script>`

2. Async Script Loading:
   - Scripts are fetched asynchronously while HTML parsing continues.
   - When a script is fetched, HTML parsing is paused, and the script is executed. After execution, HTML parsing resumes.
   - Scripts may execute out of order with respect to their appearance in the document.
   - Example: `<script src="script.js" async></script>`

3. Defer Script Loading:
   - Scripts are fetched asynchronously while HTML parsing continues.
   - Scripts are executed after HTML parsing is complete, in the order they appear in the document.
   - Example: `<script src="script.js" defer></script>`

In summary, async and defer attributes optimize script loading and execution to improve page load performance, while normal script loading blocks HTML parsing and executes scripts synchronously.